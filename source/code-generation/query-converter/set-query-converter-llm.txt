.. _rm-query-converter-set-llm:

============================================
Set the Query Converter Large Language Model
============================================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

:ref:`Query Converter <rm-query-converter>` generates application code to
streamline migrating an application from its original database
into MongoDB. Query Converter is powered by generative AI. By default, it uses
the GPT-4o model, hosted on MongoDB's `Azure OpenAI
<https://azure.microsoft.com/en-us/products/ai-services/openai-service>`__
subscription. You can configure Relational Migrator to use a different Large
Language Model (LLM) by following these steps.


Before You Begin
----------------

- Review the list of :ref:`supported providers and models <rm-supported-llms>`.
- Create an API key or access credentials for Relational Migrator.
  Required credentials depend on your AI service provider.

Steps
-----

.. procedure::
   :style: normal

   .. step:: Stop Relational Migrator.

   .. step:: Open the configuration file.

      This file is located at:

      .. include:: /includes/fact-user-properties-location.rst

   .. step:: Configure Relational Migrator for your LLM of choice.

      Set the following ``migrator.queryconversion.llm.options``, and unset
      any that aren't used for your LLM.

      .. tabs::

         .. tab:: Azure OpenAI
            :tabid: llm-settings-azure-openai

            With `Azure OpenAI
            <https://azure.microsoft.com/en-us/products/ai-services/openai-service>`__,
            Query Converter supports the `GPT-4o
            <https://platform.openai.com/docs/models#gpt-4o>`__ and `GPT-4
            <https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4>`__
            models.

            Azure OpenAI requires an API key, API version, deployment name, and
            deployment URL for authentication.

            .. code-block:: javascript
               :copyable: true

               migrator.queryconversion.llm.options.provider: AzureOpenAI
               migrator.queryconversion.llm.options.apiKey: <API key>
               migrator.queryconversion.llm.options.apiVersion: <API version>
               migrator.queryconversion.llm.options.deployment: <deployment name>
               migrator.queryconversion.llm.options.baseUrl: https://<instance>.openai.azure.com/
               migrator.queryconversion.llm.options.model: <model>

         .. tab:: OpenAI
            :tabid: llm-settings-openai

            With `OpenAI <https://platform.openai.com/docs/overview>`__, Query
            Converter supports the `GPT-4o
            <https://platform.openai.com/docs/models#gpt-4o>`__ and `GPT-4
            <https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4>`__
            models. 

            OpenAI requires an API key for authentication.

            .. code-block:: javascript
               :copyable: true

               migrator.queryconversion.llm.options.provider: OpenAI
               migrator.queryconversion.llm.options.apiKey: apiKey
               migrator.queryconversion.llm.options.baseUrl: https://api.openai.com/v1
               migrator.queryconversion.llm.options.model: gpt-4

         .. tab:: Amazon Bedrock
            :tabid: llm-settings-aws-bedrock

            With `Amazon Bedrock <https://aws.amazon.com/bedrock/>`__, Query Converter supports the `Claude 3.5 (Sonnet)
            <https://docs.anthropic.com/en/api/claude-on-amazon-bedrock>`__ and
            `Mistral Large <https://docs.mistral.ai/deployment/cloud/aws/>`__
            models.

            AWS Bedrock requires an access key ID and secret access key for authentication.

            .. code-block:: javascript
               :copyable: true

               migrator.queryconversion.llm.options.provider: AWSBedrock
               migrator.queryconversion.llm.options.awsAccessKeyId: <key ID>
               migrator.queryconversion.llm.options.awsSecretAccessKey: <access
               key>
               migrator.queryconversion.llm.options.regionName: us-east-1
               migrator.queryconversion.llm.options.modelId:
               anthropic.claude-3-sonnet-20240229-v1:0

         .. tab:: GCP Vertex AI
            :tabid: llm-settings-gcp-vertex

            With `GCP Vertex AI <https://cloud.google.com/vertex-ai>`__, Query Converter supports the `Gemini 1.5 Pro
            <https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models>`__
            model.

            Vertex requires an API key for authentication.

            .. code-block:: javascript
               :copyable: true

               migrator.queryconversion.llm.options.provider: GCPVertex
               migrator.queryconversion.llm.options.apiKey: <API key>
               migrator.queryconversion.llm.options.model: gemini-pro

         .. tab:: Self-Managed
            :tabid: llm-settings-self-managed

            With self-managed local or Cloud deployments, Query Converter supports the `Llama 3.1 405B <https://www.llama.com/docs/getting_the_models>`__
            model.

            .. code-block:: javascript
               :copyable: true

               <WIP>

   
   .. step:: Save and close the file, and restart Relational Migrator.


Next Steps
----------

If you haven't already, :ref:`enable Query Converter <rm-enable-query-converter>`.